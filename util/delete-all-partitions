#!/usr/bin/env python3


# this is so this script can import from the lib directory
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import argparse

from glutil import Partitioner, GlutilError


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""
Delete all partitions in a table.

This is useful should your partitions somehow get screwed up. Ideally, after
running this, the athena_partitioner script should be run.

NOTE: This will be substantially slower than deleting and recreating a table,
and in most cases you should just do that instead of running this script.
"""
    )
    parser.add_argument(
        "database",
        type=str,
        default="",
        help="The Athena/Glue database containing the table you want to search for partitions")
    parser.add_argument(
        "table",
        type=str,
        help="The Athena/Glue table you want to search for partitions")
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Perform a \"dry-run\", show the actions to be taken without actually performing them.")
    parser.add_argument("--profile", "-p", type=str, help="AWS profile to use")
    args = parser.parse_args()

    try:
        partitioner = Partitioner(args.database, args.table, args.profile)
    except GlutilError as e:
        print("Error:", e.message)
        sys.exit(1)

    existing = partitioner.existing_partitions()

    if args.dry_run:
        if existing:
            print("Deleting the following partitions:")
            for partition in existing:
                print("\t", str(partition))
        else:
            print("No partitions to delete")

    if not args.dry_run:
        errors = partitioner.delete_partitions(existing)
        if errors:
            print_batch_errors(errors)
